name: Fetch full sitemap (Python)

on:
  schedule:
    - cron: '0 * * * *'   # раз в час
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: python -m pip install --upgrade pip && python -m pip install requests

      - name: Download & expand sitemap into sitemap_full.txt
        env:
          MAIN_SITEMAP: "https://salomon.community/sitemap.xml"  # <- если поменяется, замени здесь
          OUTPUT_FILE: "sitemap_full.txt"
        run: |
          python - <<'PY'
          import requests, sys, xml.etree.ElementTree as ET, html
          from urllib.parse import urljoin
          import os

          MAIN = os.environ.get("MAIN_SITEMAP")
          OUT = os.environ.get("OUTPUT_FILE", "sitemap_full.txt")

          headers = {"User-Agent": "CacheWarmerBot/1.0 (+https://salomon.community)"}

          def fetch(url):
              try:
                  r = requests.get(url, headers=headers, timeout=30)
                  r.raise_for_status()
                  return r.content
              except Exception as e:
                  print("ERROR fetching", url, e)
                  return None

          def extract_locs_from_xml_bytes(bts):
              """Return list of <loc> values (handles namespace and CDATA)."""
              locs = []
              try:
                  root = ET.fromstring(bts)
              except Exception as e:
                  print("XML parse error:", e)
                  return locs
              # find all loc elements regardless of namespace
              for el in root.findall('.//{*}loc'):
                  if el is not None and el.text:
                      locs.append(el.text.strip())
              return locs

          print("Fetching main sitemap:", MAIN)
          content = fetch(MAIN)
          if not content:
              print("Failed to fetch main sitemap. Exiting.")
              sys.exit(1)

          # First check if main sitemap contains <sitemap> entries
          nested = []
          try:
              root = ET.fromstring(content)
              nested = [el.text.strip() for el in root.findall('.//{*}sitemap/{*}loc') if el.text and el.text.strip()]
          except Exception as e:
              print("Error parsing main sitemap for nested sitemap entries:", e)

          all_urls = []

          if nested:
              print(f"Found {len(nested)} nested sitemap(s).")
              for sm in nested:
                  print("Processing nested sitemap:", sm)
                  b = fetch(sm)
                  if not b:
                      print("  skipped (fetch failed):", sm)
                      continue
                  locs = extract_locs_from_xml_bytes(b)
                  print(f"  got {len(locs)} locs")
                  all_urls.extend(locs)
          else:
              # If no nested sitemaps were found, try to extract <url><loc> from main directly
              print("No nested sitemaps found — extracting <url><loc> from main sitemap")
              locs = extract_locs_from_xml_bytes(content)
              print(f"  got {len(locs)} locs")
              all_urls.extend(locs)

          # normalize and dedupe
          normalized = []
          seen = set()
          for u in all_urls:
              if not u:
                  continue
              u = u.strip()
              if u not in seen:
                  normalized.append(u)
                  seen.add(u)

          print(f"Total unique urls collected: {len(normalized)}")

          with open(OUT, "w", encoding="utf-8") as f:
              for u in normalized:
                  f.write(u + "\n")

          if len(normalized) == 0:
              print("WARNING: sitemap_full.txt is empty")
          else:
              print("Wrote", OUT)
          PY

      - name: Commit & push sitemap_full.txt
        run: |
          git config user.name "Sitemap Updater"
          git config user.email "actions@github.com"
          git add sitemap_full.txt || true
          git commit -m "update full sitemap $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No changes to commit"
          git push
